{
  "name":"jshint",
  "patterns":[ {
    "ruleId" : "bitwise",
    "title" : "Prohibit bitwise operators",
    "description" : "Prohibits the use of bitwise operators such as ^ (XOR), (OR) and others"
  }, {
    "ruleId" : "camelcase",
    "title" : "Enforce camel case",
    "description" : "Requires all variable names to use either camelCase style or UPPER_CASE with underscores"
  }, {
    "ruleId" : "curly",
    "title" : "Enforce curly braces",
    "description" : "Requires curly braces around blocks in loops and conditionals"
  }, {
    "ruleId" : "eqeqeq",
    "title" : "Enforce ===",
    "description" : "Requires the use of === and !== instead of == and !="
  }, {
    "ruleId" : "forin",
    "title" : "Enforce hasOwnProperty in loops",
    "description" : "Requires the filter of inherited properties of an object when you use the for in loop"
  }, {
    "ruleId" : "freeze",
    "title" : "Prohibit native prototype overwriting",
    "description" : "Prohibits overwriting prototypes of native objects such as Array, Date and so on"
  }, {
    "ruleId" : "immed",
    "title" : "Enforce parentheses in function calls",
    "description" : "Requires the use of parentheses in immediate function invocations"
  }, {
    "ruleId" : "latedef",
    "title" : "Enforce variable def before use",
    "description" : "Prohibits the use of a variable before it was defined.",
    "parameters" : [ {
      "name" : "latedef",
      "description" : "Declaration order verification. Check all [true] | Do not check functions [nofunc]",
      "default" : "nofunc"
    } ]
  }, {
    "ruleId" : "newcap",
    "title" : "Enforce capitalized constructor",
    "description" : "Requires capitalization of names of constructor functions"
  }, {
    "ruleId" : "noarg",
    "title" : "Prohibit arguments.caller and arguments.callee",
    "description" : "Prohibits the use of arguments.caller and arguments.callee"
  }, {
    "ruleId" : "nonew",
    "title" : "Prohibit constructor functions",
    "description" : "Prohibits the use of constructor functions for side-effects"
  }, {
    "ruleId" : "plusplus",
    "title" : "Prohibit ++ and --",
    "description" : "Prohibits the use of unary increment and decrement operators"
  }, {
    "ruleId" : "quotmark",
    "title" : "Enforce quotation marks",
    "description" : "Requires consistency of quotation marks used"
  }, {
    "ruleId" : "undef",
    "title" : "Prohibit undeclared variables",
    "description" : "Prohibits the use of explicitly undeclared variables"
  }, {
    "ruleId" : "unused",
    "title" : "Prohibit unused variables",
    "description" : "Prohibits defining and never use variables",
    "parameters" : [ {
      "name" : "unused",
      "description" : "only check for variables [vars] | also check parameters [strict] | default [true] allow unused parameters followed by used",
      "default" : true
    } ]
  }, {
    "ruleId" : "maxlen",
    "title" : "Excessive line length",
    "description" : "Requires every line to have a limit of characters",
    "parameters" : [ {
      "name" : "maxlen",
      "description" : "Reporting threshold for the number of characters per line",
      "default" : 200
    } ]
  }, {
    "ruleId" : "indent",
    "title" : "Indentation",
    "description" : "Requires consistent indentation",
    "parameters" : [ {
      "name" : "indent",
      "description" : "Reporting threshold for the indentation",
      "default" : 2
    } ]
  }, {
    "ruleId" : "trail",
    "title" : "Prohibit trailing whitespaces",
    "description" : "Prohibits trailing whitespaces which can cause problems with multi-line strings"
  }, {
    "ruleId" : "maxparams",
    "title" : "Enforce number of function parameters",
    "description" : "Requires functions to have a limit of formal parameters",
    "parameters" : [ {
      "name" : "maxparams",
      "description" : "Reporting threshold for the number of parameters allowed per function",
      "default" : 7
    } ]
  }, {
    "ruleId" : "maxdepth",
    "title" : "Enforce block max depth",
    "description" : "Require all blocks to have a max depth",
    "parameters" : [ {
      "name" : "maxdepth",
      "description" : "Reporting threshold for the max depth",
      "default" : 3
    } ]
  }, {
    "ruleId" : "maxstatements",
    "title" : "Excessive statements",
    "description" : "Requires all functions to have a limit of its statements",
    "parameters" : [ {
      "name" : "maxstatements",
      "description" : "Reporting threshold for the number of statements per function",
      "default" : 3
    } ]
  }, {
    "ruleId" : "maxcomplexity",
    "title" : "Cyclomatic complexity",
    "description" : "Requires code to have low cyclomatic complexity",
    "parameters" : [ {
      "name" : "maxcomplexity",
      "description" : "Reporting threshold for cyclomatic complexity per function",
      "default" : 7
    } ]
  }, {
    "ruleId" : "asi",
    "title" : "Enforce semicolon use",
    "description" : "Requires each line to end in a semicolon"
  }, {
    "ruleId" : "boss",
    "title" : "Prohibit assignments in comparisons",
    "description" : "Prohibits the use of assignments in cases where comparisons are expected"
  }, {
    "ruleId" : "debug",
    "title" : "Prohibit debugger statements",
    "description" : "Prohibits debugger statements"
  }, {
    "ruleId" : "null",
    "title" : "Prohibit == null comparisons",
    "description" : "Prohibits == null comparisons"
  }, {
    "ruleId" : "evil",
    "title" : "Prohibit eval",
    "description" : "Prohibits the use of eval for security and performance reasons"
  }, {
    "ruleId" : "expr",
    "title" : "Prohibit unusually placed expressions",
    "description" : "Prohibits use of expressions where normally you would expect to see assignments or function calls"
  }, {
    "ruleId" : "funcscope",
    "title" : "Prohibit variables used out of scope",
    "description" : "Prohibits declaring variables inside of control structures while accessing them later from the outside"
  }, {
    "ruleId" : "iterator",
    "title" : "Prohibit __iterator__ property",
    "description" : "Prohibits the use of __iterator__ property due to compatibility issues"
  }, {
    "ruleId" : "loopfunc",
    "title" : "Prohibit function def inside loops",
    "description" : "Prohibits the definition of function inside the body of loops"
  }, {
    "ruleId" : "multistr",
    "title" : "Prohibit multi line strings",
    "description" : "Prohibits the use of multi line strings due to whitespace error-proning"
  }, {
    "ruleId" : "notypeof",
    "title" : "Prohibit invalid typeof operators",
    "description" : "Prohibits  invalid typeof operator values"
  }, {
    "ruleId" : "shadow",
    "title" : "Prohibit variable shadowing",
    "description" : "Prohibits the declaration of a variable that had been already declared somewhere in the outer scope."
  }, {
    "ruleId" : "proto",
    "title" : "Prohibit __proto__ property",
    "description" : "Prohibits the use of __proto__ property"
  }, {
    "ruleId" : "sub",
    "title" : "Prohibit [] notation",
    "description" : "Prohibit [] notation when it can be expressed in dot notation"
  }, {
    "ruleId" : "supernew",
    "title" : "Prohibit new function",
    "description" : "Prohibits weird constructions like `new function () { ... }` and `new Object;"
  } ]
}