[
  {
    "patternId":"rulesets_java_comments.xml_CommentRequired",
    "title":"Denotes whether comments are required (or unwanted) for specific language elements.",
    "description":"Denotes whether comments are required (or unwanted) for specific language elements.",
    "timeToFix":5,
    "parameters":[
      {
        "name":"violationSuppressRegex",
        "description":"Suppress violations with messages matching a regular expression"
      },
      {
        "name":"violationSuppressXPath",
        "description":"Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId":"rulesets_java_coupling.xml_LoosePackageCoupling",
    "title":"Prohibits the use of packages outside of hierarchy",
    "description":"Prohibits the use of classes from the configured package hierarchy outside of the package hierarchy.",
    "timeToFix":50,
    "parameters":[
      {
        "name":"violationSuppressRegex",
        "description":"Suppress violations with messages matching a regular expression"
      },
      {
        "name":"violationSuppressXPath",
        "description":"Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name":"classes",
        "description":"Allowed classes"
      },
      {
        "name":"packages",
        "description":"Restricted packages"
      }
    ]
  },
  {
    "patternId":"rulesets_java_imports.xml_DuplicateImports",
    "title":"Duplicate or overlapping import statements should be avoided.",
    "description":"Duplicate or overlapping import statements should be avoided.",
    "timeToFix":5,
    "parameters":[
      {
        "name":"violationSuppressRegex",
        "description":"Suppress violations with messages matching a regular expression"
      },
      {
        "name":"violationSuppressXPath",
        "description":"Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId":"rulesets_java_typeresolution.xml_CloneMethodMustImplementCloneable",
    "title":"Enforces the implementation of Cloneable interface when using clone()",
    "description":"The method clone() should only be implemented if the class implements the Cloneable interface with the exception of a final method that only throws CloneNotSupportedException. This version uses PMD’s type resolution facilities, and can detect if the class implements or extends a Cloneable class.",
    "timeToFix":5,
    "parameters":[
      {
        "name":"violationSuppressRegex",
        "description":"Suppress violations with messages matching a regular expression"
      },
      {
        "name":"violationSuppressXPath",
        "description":"Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId":"rulesets_java_comments.xml_CommentContent",
    "title":"A rule for the politically correct… we don’t want to offend anyone.",
    "description":"A rule for the politically correct… we don’t want to offend anyone.",
    "timeToFix":5,
    "parameters":[
      {
        "name":"violationSuppressRegex",
        "description":"Suppress violations with messages matching a regular expression"
      },
      {
        "name":"violationSuppressXPath",
        "description":"Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId":"rulesets_java_migrating.xml_AvoidEnumAsIdentifier",
    "title":"Use of the term ‘enum’ will conflict with newer versions of Java since it is a reserved word.",
    "description":"Use of the term ‘enum’ will conflict with newer versions of Java since it is a reserved word.",
    "timeToFix":5
  },
  {
    "patternId":"rulesets_java_typeresolution.xml_UnusedImports",
    "title":"Prohibits unused import statements",
    "description":"Avoid unused import statements. This rule will find unused on demand imports, i.e. import com.foo.*.",
    "timeToFix":5,
    "parameters":[
      {
        "name":"violationSuppressRegex",
        "description":"Suppress violations with messages matching a regular expression"
      },
      {
        "name":"violationSuppressXPath",
        "description":"Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId":"rulesets_java_design.xml_PositionLiteralsFirstInCaseInsensitiveComparisons",
    "title":"Enforces literals first in comparisons",
    "description":"Enforces literals to be positioned first in case insensitive comparisons",
    "timeToFix":10
  },
  {
    "patternId":"rulesets_java_design.xml_UnnecessaryLocalBeforeReturn",
    "title":"Prohibits unnecessary local variables",
    "description":"Prohibits the creation of unnecessary local variables",
    "timeToFix":10,
    "parameters":[
      {
        "name":"violationSuppressRegex",
        "description":"Suppress violations with messages matching a regular expression"
      },
      {
        "name":"violationSuppressXPath",
        "description":"Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId":"rulesets_java_junit.xml_TestClassWithoutTestCases",
    "title":"Test classes end with the suffix Test. Having a non-test class with that name is not a good practice, since most people will assume it is a test case. Test classes have test methods named testXXX.",
    "description":"Test classes end with the suffix Test. Having a non-test class with that name is not a good practice, since most people will assume it is a test case. Test classes have test methods named testXXX.",
    "timeToFix":5,
    "parameters":[
      {
        "name":"violationSuppressRegex",
        "description":"Suppress violations with messages matching a regular expression"
      },
      {
        "name":"violationSuppressXPath",
        "description":"Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId":"rulesets_java_typeresolution.xml_LooseCoupling",
    "title":"Enforces use of the interface instead of implementation types",
    "description":"Avoid using implementation types (i.e., HashSet); use the interface (i.e, Set) instead",
    "timeToFix":5,
    "parameters":[
      {
        "name":"violationSuppressRegex",
        "description":"Suppress violations with messages matching a regular expression"
      },
      {
        "name":"violationSuppressXPath",
        "description":"Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId":"rulesets_java_comments.xml_CommentSize",
    "title":"Determines whether the dimensions of non-header comments found are within the specified limits.",
    "description":"Determines whether the dimensions of non-header comments found are within the specified limits.",
    "timeToFix":5,
    "parameters":[
      {
        "name":"violationSuppressRegex",
        "description":"Suppress violations with messages matching a regular expression"
      },
      {
        "name":"violationSuppressXPath",
        "description":"Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId":"rulesets_java_coupling.xml_CouplingBetweenObjects",
    "title":"Enforces coupling conventions between objects",
    "description":"Enforces conventions based on the number of unique attributes, local variables, and return types within an object.",
    "timeToFix":180,
    "parameters":[
      {
        "name":"violationSuppressRegex",
        "description":"Suppress violations with messages matching a regular expression"
      },
      {
        "name":"violationSuppressXPath",
        "description":"Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name":"threshold",
        "description":"Unique type reporting threshold"
      }
    ]
  },
  {
    "patternId":"rulesets_java_design.xml_GodClass",
    "title":"Prohibits the usage of a God Class",
    "description":"Prohibits the usage of a class that have and does too many things",
    "timeToFix":480,
    "parameters":[
      {
        "name":"violationSuppressRegex",
        "description":"Suppress violations with messages matching a regular expression"
      },
      {
        "name":"violationSuppressXPath",
        "description":"Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId":"rulesets_java_design.xml_SwitchDensity",
    "title":"Prohibits a high ratio of statements in a switch statement",
    "description":"Prohibits a high ratio of statements in a switch statement.",
    "timeToFix":90,
    "parameters":[
      {
        "name":"violationSuppressRegex",
        "description":"Suppress violations with messages matching a regular expression"
      },
      {
        "name":"violationSuppressXPath",
        "description":"Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name":"minimum",
        "description":"Minimum reporting threshold"
      }
    ]
  },
  {
    "patternId":"rulesets_java_controversial.xml_UseConcurrentHashMap",
    "title":"Enforces the use of Concurrent HashMap",
    "description":"Since Java5 brought a new implementation of the Map designed for multi-threaded access, you can perform efficient map reads without blocking other threads.",
    "timeToFix":5
  },
  {
    "patternId":"rulesets_java_typeresolution.xml_SignatureDeclareThrowsException",
    "title":"Enforces the use of either a class derived from RunTimeException or a checked exception",
    "description":"It is unclear which exceptions that can be thrown from the methods. It might be difficult to document and understand the vague interfaces. Use either a class derived from RuntimeException or a checked exception.",
    "timeToFix":5,
    "parameters":[
      {
        "name":"violationSuppressRegex",
        "description":"Suppress violations with messages matching a regular expression"
      },
      {
        "name":"violationSuppressXPath",
        "description":"Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name":"IgnoreJUnitCompletely",
        "description":"If true, all methods in a JUnit testcase may throw Exception"
      },
      {
        "name":"IgnoreJUnitCompletely",
        "description":"Allow all methods in a JUnit testcase to throw Exceptions"
      }
    ]
  },
  {
    "patternId":"rulesets_java_migrating.xml_AvoidAssertAsIdentifier",
    "title":"Use of the term ‘assert’ will conflict with newer versions of Java since it is a reserved word.",
    "description":"Use of the term ‘assert’ will conflict with newer versions of Java since it is a reserved word.",
    "timeToFix":5
  },
  {
    "patternId":"rulesets_java_javabeans.xml_BeanMembersShouldSerialize",
    "title":"If a class is a bean, or is referenced by a bean directly or indirectly it needs to be serializable. Member variables need to be marked as transient, static, or have accessor methods in the class. Marking variables as transient is the safest and easiest modification. Accessor methods should follow the Java naming conventions, i.e. for a variable named foo, getFoo() and setFoo() accessor methods should be provided.",
    "description":"If a class is a bean, or is referenced by a bean directly or indirectly it needs to be serializable. Member variables need to be marked as transient, static, or have accessor methods in the class. Marking variables as transient is the safest and easiest modification. Accessor methods should follow the Java naming conventions, i.e. for a variable named foo, getFoo() and setFoo() accessor methods should be provided.",
    "timeToFix":5,
    "parameters":[
      {
        "name":"violationSuppressRegex",
        "description":"Suppress violations with messages matching a regular expression"
      },
      {
        "name":"violationSuppressXPath",
        "description":"Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  }
]