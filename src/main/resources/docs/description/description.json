[
  {
    "patternId": "rulesets_java_unusedcode.xml_UnusedPrivateField",
    "title": "Prohibits unused private fields",
    "description": "Prohibits writing private fields that are not used",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_unusedcode.xml_UnusedLocalVariable",
    "title": "Prohibits unused local variables",
    "description": "Prohibits writing local variables that are not used",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_unusedcode.xml_UnusedPrivateMethod",
    "title": "Prohibits unused private methods",
    "description": "Prohibits writing private methods that are not used",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_unusedcode.xml_UnusedFormalParameter",
    "title": "Prohibits unused parameters",
    "description": "Prohibits passing parameters to methods or constructors without actually referencing them in the method body",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "checkAll",
        "description": "Check all methods, including non-private ones"
      }
    ]
  },
  {
    "patternId": "rulesets_java_unusedcode.xml_UnusedModifier",
    "title": "Prohibits modifiers on interfaces' fields",
    "description": "Prohibits the use of modifiers on the fields of an interface",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_basic.xml_JumbledIncrementer",
    "title": "Prohibits jumbled loop incrementers",
    "description": "Prohibits a loop condition to test one variable and increment a different one",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_basic.xml_ForLoopShouldBeWhileLoop",
    "title": "Prohibits for loops when while is enough",
    "description": "Prohibits a for loop with just a condition, a while is enough",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_basic.xml_OverrideBothEqualsAndHashcode",
    "title": "Overriding HashCode and Equals or neither",
    "description": "When overriding HashCode or Equals, is necessary to override the other one",
    "timeToFix": 60,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_basic.xml_DoubleCheckedLocking",
    "title": "Prohibits Double Checked Locking",
    "description": "Prohibits the creation of objects using Double Checked Locking pattern",
    "timeToFix": 30,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_basic.xml_ReturnFromFinallyBlock",
    "title": "Prohibits returning from a finally block",
    "description": "Prohibits returning from a finally block",
    "timeToFix": 30
  },
  {
    "patternId": "rulesets_java_basic.xml_AvoidDecimalLiteralsInBigDecimalConstructor",
    "title": "Prohibits loss of precision using BigDecimal",
    "description": "Prohibits the use of decimals in the constructor of BigDecimal",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_basic.xml_BrokenNullCheck",
    "title": "Prohibits the use of a broken null check",
    "description": "Prohibits a null checks, when its check throws a NullPointerException itself",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_basic.xml_AvoidUsingOctalValues",
    "title": "Prohibits the use of octal literals",
    "description": "Prohibits the use of literals starting with 0",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "strict",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_basic.xml_CheckResultSet",
    "title": "Checks for navigation methods of a ResultSet",
    "description": "Checks the return values of navigation methods(next, previous..) of a ResultSet",
    "timeToFix": 20,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_basic.xml_AvoidMultipleUnaryOperators",
    "title": "Prohibits the use of multiple unary operators",
    "description": "Prohibits the use of multiple unary operators together in the same expression",
    "timeToFix": 30,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_basic.xml_CheckSkipResult",
    "title": "Prohibits the use of skip without checking return",
    "description": "Prohibits the usage of InputStream.skip(long n) without checking the return value",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_basic.xml_AvoidBranchingStatementAsLastInLoop",
    "title": "Prohibits branch statement at last part of loop",
    "description": "Prohibits the usage of a branch statement (like break) at last part of a loop",
    "timeToFix": 50,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "checkReturnLoopTypes",
        "description": "Check for return statements in loop types"
      },
      {
        "name": "checkContinueLoopTypes",
        "description": "Check for continue statements in loop types"
      },
      {
        "name": "checkBreakLoopTypes",
        "description": "Check for break statements in loop types"
      }
    ]
  },
  {
    "patternId": "rulesets_java_basic.xml_DontCallThreadRun",
    "title": "Prohibits the usage of Thread.run()",
    "description": "Prohibits the usage of Thread.run()",
    "timeToFix": 20
  },
  {
    "patternId": "rulesets_java_basic.xml_DontUseFloatTypeForLoopIndices",
    "title": "Prohibits the use of Floats for loops",
    "description": "Prohibits the use of floating point for loop indices",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_braces.xml_IfStmtsMustUseBraces",
    "title": "Prohibits if statements without braces",
    "description": "Prohibits the usage of if statements without using braces to surround the code block",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_braces.xml_WhileLoopsMustUseBraces",
    "title": "Prohibits while loops without braces",
    "description": "Prohibits the usage of while loops without using braces to surround the code block",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_braces.xml_IfElseStmtsMustUseBraces",
    "title": "Prohibits if..else statements without braces",
    "description": "Prohibits the usage of if..else statements without using braces to surround the code block",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_braces.xml_ForLoopsMustUseBraces",
    "title": "Prohibits for loops without braces",
    "description": "Prohibits the usage of for loops without using braces to surround the code block",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_naming.xml_ShortVariable",
    "title": "Prohibits short variable names",
    "description": "Prohibits fields, local variables, or parameter names that are very short",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_naming.xml_LongVariable",
    "title": "Prohibits long variable names",
    "description": "Prohibits fields, local variables, or parameter names that are very long",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "minimum",
        "description": " The variable length reporting threshold"
      }
    ]
  },
  {
    "patternId": "rulesets_java_naming.xml_ShortMethodName",
    "title": "Prohibits short method names",
    "description": "Prohibits the usage of method names that are very short",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_naming.xml_MethodNamingConventions",
    "title": "Enforce method naming convention",
    "description": "Method names must be in camelCase, and should not contain underscores.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_naming.xml_ClassNamingConventions",
    "title": "Enforce class naming convention",
    "description": "Class names must be in CamelCase, and must start with an upper case character",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_naming.xml_AbstractNaming",
    "title": "Enforce abstract class naming convention",
    "description": "Abstract classes must be named AbstractXXX",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_naming.xml_AvoidDollarSigns",
    "title": "Prohibits dollar signs in names",
    "description": "Prohibits the usage of dollar signs in variable/method/class/interface names.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_naming.xml_MethodWithSameNameAsEnclosingClass",
    "title": "Prohibits methods with the same name as the class",
    "description": "Prohibits non-constructor methods should with the same name as the enclosing class.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_naming.xml_SuspiciousHashcodeMethodName",
    "title": "Prohibits method name close to hashCode()",
    "description": "Prohibits method names and return type when are suspiciously close to hashCode().",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_naming.xml_SuspiciousConstantFieldName",
    "title": "Enforces constant field names conventions",
    "description": "Prohibits constant field names using all uppercase characters.",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_naming.xml_SuspiciousEqualsMethodName",
    "title": "Prohibits method signatures similar to equals(Object)",
    "description": "Prohibits method name and parameteres suspiciously close to equals(Object)",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_naming.xml_AvoidFieldNameMatchingTypeName",
    "title": "Prohibits field name matching class name",
    "description": "Prohibits the use of a field name matching the declaring class name.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_naming.xml_AvoidFieldNameMatchingMethodName",
    "title": "Prohibits field name matching a method name",
    "description": "Prohibits the use of a field name matching a method name.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_naming.xml_NoPackage",
    "title": "Enforces package definition",
    "description": "Enforces package definition class or interface does not have a package definition.",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_naming.xml_PackageCase",
    "title": "Prohibits uppercase characters in package definition",
    "description": "Prohibits uppercase characters in package definition.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_naming.xml_MisleadingVariableName",
    "title": "Prohibits non-field names starting with m_",
    "description": "Prohibits non-field names starting with m_ .",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_naming.xml_BooleanGetMethodName",
    "title": "Enforces boolean result methods name conventions",
    "description": "Enforces boolean result methods to be named as predicate statements.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "checkParameterizedMethods",
        "description": "Check parameterized methods "
      }
    ]
  },
  {
    "patternId": "rulesets_java_naming.xml_ShortClassName",
    "title": "Prohibits short class names",
    "description": "Prohibits class names shorter than five characters (can be parameterized).",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "minimum",
        "description": "Suppress violations with messages matching a regular expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_naming.xml_GenericsNaming",
    "title": "Enforces generic names to a single letter",
    "description": "Names for references to generic values must be limited to a single uppercase letter",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_optimizations.xml_LocalVariableCouldBeFinal",
    "title": "Enforces variables assigned only once to not be declared final.",
    "description": "A local variable assigned only once can be declared final.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_optimizations.xml_MethodArgumentCouldBeFinal",
    "title": "Enforces a method to be declared final when never re-assigned.",
    "description": "A method argument that is never re-assigned within the method can be declared final.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_optimizations.xml_AvoidInstantiatingObjectsInLoops",
    "title": "Enforces Object creation outside loops.",
    "description": "New objects created within loops should be checked to see if they can created outside them and reused.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_sunsecure.xml_MethodReturnsInternalArray",
    "title": "Prohibits the return of internal arrays",
    "description": "Prohibits the return of internal arrays to the caller.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_sunsecure.xml_ArrayIsStoredDirectly",
    "title": "Ṕrohibits storing received arrays",
    "description": "Ṕrohibits storing arrays received by constructors or methods.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_coupling.xml_CouplingBetweenObjects",
    "title": "Enforces coupling conventions between objects",
    "description": "Enforces conventions based on the number of unique attributes, local variables, and return types within an object.",
    "timeToFix": 180,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "threshold",
        "description": "Unique type reporting threshold"
      }
    ]
  },
  {
    "patternId": "rulesets_java_coupling.xml_ExcessiveImports",
    "title": "Prohibits a high number of imports",
    "description": "Prohibits a high number of imports in the same file",
    "timeToFix": 180,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "minimum",
        "description": "Minimum reporting threshold"
      }
    ]
  },
  {
    "patternId": "rulesets_java_coupling.xml_LooseCoupling",
    "title": "Enforces referecens to be interfaces when possible",
    "description": "Enforces whenever available, referencing objects by their interface types.",
    "timeToFix": 30,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_coupling.xml_LoosePackageCoupling",
    "title": "Prohibits the use of packages outside of hierarchy",
    "description": "Prohibits the use of classes from the configured package hierarchy outside of the package hierarchy.",
    "timeToFix": 50,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "classes",
        "description": "Allowed classes"
      },
      {
        "name": "packages",
        "description": "Restricted packages"
      }
    ]
  },
  {
    "patternId": "rulesets_java_coupling.xml_LawOfDemeter",
    "title": "Enforces the The Law of Demeter",
    "description": "Enforces The Law of Demeter, only talk to friends.",
    "timeToFix": 80,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_optimizations.xml_UseArrayListInsteadOfVector",
    "title": "Enforces ArrayList instead of Vector for performance",
    "description": "ArrayList is a much better Collection implementation than Vector if thread-safe operation is not required.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_optimizations.xml_SimplifyStartsWith",
    "title": "Enforces charAt(0) over startsWith",
    "description": "(string).startsWith although it adds some sintactic sugar to our code, performance wise (string).charAt(0) is a better approach",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_optimizations.xml_UseStringBufferForStringAppends",
    "title": "Enforces StringBuilder over '+=' operator",
    "description": "The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If a non-trivial number of these concatenations are being used then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_optimizations.xml_UseArraysAsList",
    "title": "Enforce use of java.util.Arrays asList method instead of loop copy",
    "description": "The java.util.Arrays class has a “asList” method that should be used when you want to create a new List from an array of objects. It is faster than executing a loop to copy all the elements of the array one by one.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_optimizations.xml_AvoidArrayLoops",
    "title": "Enforce user of System.arraycopy instead of manual copy",
    "description": "Instead of manually copying data between two arrays, use the efficient System.arraycopy method instead.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_optimizations.xml_UnnecessaryWrapperObjectCreation",
    "title": "Enforces the use of static conversion instead of intermediate objects to convert ",
    "description": "Most wrapper classes provide static conversion methods that avoid the need to create intermediate objects just to create the primitive forms. Using these avoids the cost of creating objects that also need to be garbage-collected later.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_optimizations.xml_AddEmptyString",
    "title": "Enforces the use of toString() instead of concatenating literals using empty strings",
    "description": "The conversion of literals to strings by concatenating them with empty strings is inefficient. It is much better to use one of the type-specific toString() methods instead.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_optimizations.xml_RedundantFieldInitializer",
    "title": "Prohibits the initialization of default values",
    "description": "Java will initialize fields with known default values so any explicit initialization of those same defaults is redundant and results in a larger class file (approximately three additional bytecode instructions per field).",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_optimizations.xml_PrematureDeclaration",
    "title": "Prohibits the declaration of variables before they might be used",
    "description": "Checks for variables that are defined before they might be used. A reference is deemed to be premature if it is created right before a block of code that doesn’t use it that also has the ability to return or throw an exception.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_controversial.xml_UnnecessaryConstructor",
    "title": "Prohibits public empty constructors",
    "description": "This rule detects when a constructor is not necessary; i.e., when there is only one constructor, its public, has an empty body, and takes no arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_controversial.xml_NullAssignment",
    "title": "Prohibits assigning 'null' to a variable outside of its declaration",
    "description": "Assigning a “null” to a variable (outside of its declaration) is usually bad form. Sometimes, this type of assignment is an indication that the programmer doesn’t completely understand what is going on in the code.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_controversial.xml_OnlyOneReturn",
    "title": "Enforces the use of only one return point",
    "description": "A method should have only one exit point, and that should be the last statement in the method.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_controversial.xml_AssignmentInOperand",
    "title": "Prohibits the use of assignments in operands",
    "description": "Avoid assignments in operands; this can make code more complicated and harder to read.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "allowIncrementDecrement",
        "description": "Allow increment or decrement operators within the conditional expression of an if, for, or while statement"
      },
      {
        "name": "allowWhile",
        "description": "Allow assignment within the conditional expression of a while statement"
      },
      {
        "name": "allowFor",
        "description": "Allow assignment within the conditional expression of a for statement"
      },
      {
        "name": "allowIf",
        "description": "Allow assignment within the conditional expression of an if statement"
      }
    ]
  },
  {
    "patternId": "rulesets_java_controversial.xml_AtLeastOneConstructor",
    "title": "Each class should declare at least one constructor.",
    "description": "Each class should declare at least one constructor.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_controversial.xml_DontImportSun",
    "title": "Prohibits the use of sun.* packages.",
    "description": "Avoid importing anything from the ‘sun.*’ packages. These packages are not portable and are likely to change.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_UseUtilityClass",
    "title": "Enforces the use of utility classes",
    "description": "For classes that only have static methods, make them utility classes.",
    "timeToFix": 60,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_SimplifyBooleanReturns",
    "title": "Prohibits if-else when returning boolean",
    "description": "Prohibits unnecessary if-then-else statements when returning a boolean.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_SimplifyBooleanExpressions",
    "title": "Prohibits unnecessary comparisons in boolean expressions",
    "description": "Prohibits unnecessary comparisons in boolean expressions",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_design.xml_SwitchStmtsShouldHaveDefault",
    "title": "Prohibits switch statements with no default",
    "description": "Prohibits the usage of switch statements without a default option to catch any unspecified values.",
    "timeToFix": 20
  },
  {
    "patternId": "rulesets_java_design.xml_AvoidDeeplyNestedIfStmts",
    "title": "Prohibits deeply nested if-then statements",
    "description": "Prohibits the usage of deeply nested if-then statements.",
    "timeToFix": 80,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "problemDepth",
        "description": "The if statement depth reporting threshold"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_AvoidReassigningParameters",
    "title": "Prohibits reassigning values to parameters",
    "description": " Prohibits reassigning values to incoming parameters.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_SwitchDensity",
    "title": "Prohibits a high ratio of statements in a switch statement",
    "description": "Prohibits a high ratio of statements in a switch statement.",
    "timeToFix": 90,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "minimum",
        "description": "Minimum reporting threshold"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_ConstructorCallsOverridableMethod",
    "title": "Prohibits calling overridable methods during construction",
    "description": "Prohibits the call of overridable methods during construction of an object.",
    "timeToFix": 60,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_controversial.xml_SuspiciousOctalEscape",
    "title": "Prohibits the use of octal escape sequence inside a String literal",
    "description": "A suspicious octal escape sequence was found inside a String literal. An octal escape sequence inside a literal String shall consist of a backslash followed by OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigit",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_controversial.xml_CallSuperInConstructor",
    "title": "Enforces calling super inside a constructor",
    "description": "It is a good practice to call super() in a constructor. If super() is not called but another constructor (such as an overloaded constructor) is called, this rule will not report it.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_design.xml_FinalFieldCouldBeStatic",
    "title": "Enforces constants as static final",
    "description": "If a final field is assigned to a compile-time constant, enforces it to be static",
    "timeToFix": 15
  },
  {
    "patternId": "rulesets_java_design.xml_CloseResource",
    "title": "Enforces that resources are closed",
    "description": "Enforces that resources (like Connection, Statement, and ResultSet objects) are always closed after use.",
    "timeToFix": 20,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_NonStaticInitializer",
    "title": "Prohibits non-static initializer block",
    "description": "Prohibits the usage of a non-static initializer block.",
    "timeToFix": 30  
  },
  {
    "patternId": "rulesets_java_design.xml_DefaultLabelNotLastInSwitchStmt",
    "title": "Enforces default label to be last on switch",
    "description": "Enforces the default label to be the last label in a switch statement.",
    "timeToFix": 40
  },
  {
    "patternId": "rulesets_java_design.xml_NonCaseLabelInSwitchStatement",
    "title": "Prohibits non-case label in a switch",
    "description": "Prohibits a non-case label (e.g. a named break/continue label) within a switch statement.",
    "timeToFix": 40
  },
  {
    "patternId": "rulesets_java_design.xml_OptimizableToArrayCall",
    "title": "Enforces good usage of toArray()",
    "description": "Calls to a collection’s toArray() method must specify target arrays sized to match the size of the collection.",
    "timeToFix": 15
  },
  {
    "patternId": "rulesets_java_design.xml_BadComparison",
    "title": "Prohibits comparisons with Double.NaN",
    "description": "Prohibits equality comparisons with Double.NaN.",
    "timeToFix": 15
  },
  {
    "patternId": "rulesets_java_design.xml_EqualsNull",
    "title": "Prohibits testing for null with equals",
    "description": "Prohibits testing for null ussing the equals() method.",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_design.xml_ConfusingTernary",
    "title": "Prohibits negation within an if-else",
    "description": "Prohibits negation within an 'if' expression with an 'else' clause.",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "ignoreElseIf",
        "description": "Ignore conditions with an else-if case"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_InstantiationToGetClass",
    "title": "Prohibits instantiating object to call getClass",
    "description": "Prohibits instantiating an object just to call getClass() on it",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_design.xml_IdempotentOperations",
    "title": "Prohibits idempotent operations",
    "description": "Prohibits operations which have no effects",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_SimpleDateFormatNeedsLocale",
    "title": "Prohibits SimpleDateFormat without Locale",
    "description": "Prohibits creating a SimpleDateFormat instances without specifying the Locale",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_design.xml_ImmutableField",
    "title": "Enforces never changed fields to be final",
    "description": "Enforces private fields whose values never change to be final.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_UseLocaleWithCaseConversions",
    "title": "Prohibits toLower/UpperCase without Locale",
    "description": "Prohibits String.toLowerCase()/toUpperCase() conversions without Locale.",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_design.xml_AvoidProtectedFieldInFinalClass",
    "title": "Prohibits protected fields in final class",
    "description": "Prohibits the usage of protected fields in final classes",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_controversial.xml_UnnecessaryParentheses",
    "title": "Enforces the correct use of parentheses",
    "description": "Sometimes expressions are wrapped in unnecessary parentheses, making them look like function calls.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_controversial.xml_DataflowAnomalyAnalysis",
    "title": "Enforces good dataflow",
    "description": "The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow. From those informations there can be found various problems such as a reference to a variable that was not defined before, a recently defined variable is undefined and a recently defined variable is redefined",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "maxViolations",
        "description": "Maximum number of anomalies per class"
      },
      {
        "name": "maxPaths",
        "description": "maximum number of checked paths per method. A lower value will increase the performance of the rule but may decrease anomalies found"
      }
    ]
  },
  {
    "patternId": "rulesets_java_controversial.xml_AvoidFinalLocalVariable",
    "title": "Prohibits the use of final local variables",
    "description": "Avoid using final local variables, turn them into fields.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_controversial.xml_AvoidUsingShortType",
    "title": "Prohibits the usage of the 'short' type",
    "description": "Java uses the ‘short’ type to reduce memory usage, not to optimize calculation. In fact, the JVM does not have any arithmetic capabilities for the short type: the JVM must convert the short into an int, do the proper calculation and convert the int back to a short. Thus any storage gains found through use of the ‘short’ type may be offset by adverse impacts on performance.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_controversial.xml_AvoidUsingVolatile",
    "title": "Prohibits the use of Volatile keyword",
    "description": "Use of the keyword ‘volatile’ is generally used to fine tune a Java application, and therefore, requires a good expertise of the Java Memory Model. Moreover, its range of action is somewhat misknown. Therefore, the volatile keyword should not be used for maintenance purpose and portability.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_controversial.xml_DoNotCallGarbageCollectionExplicitly",
    "title": "Prohibits the use of Calling GarbageCollector within the code",
    "description": "Calls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised. Code should have the same behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not. Moreover, “modern” jvms do a very good job handling garbage collections. If memory usage issues unrelated to memory leaks develop within an application, it should be dealt with JVM options rather than within the code itself.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_controversial.xml_OneDeclarationPerLine",
    "title": "Enforces the declaration of one variable per line",
    "description": "Java allows the use of several variables declaration of the same type on one line. However, it can lead to quite messy code. This rule looks for several declarations on the same line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "strictMode",
        "description": "If true, mark combined declaration even if the declarations are on seperate lines."
      }
    ]
  },
  {
    "patternId": "rulesets_java_controversial.xml_AvoidPrefixingMethodParameters",
    "title": "Enforces good naming of variables",
    "description": "Prefixing parameters by ‘in’ or ‘out’ pollutes the name of the parameters and reduces code readability. To indicate whether or not a parameter will be modify in a method, its better to document method behavior with Javadoc.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_controversial.xml_AvoidLiteralsInIfCondition",
    "title": "Prohibits the use of literals in If Else statements",
    "description": "Avoid using hard-coded literals in conditional statements. By declaring them as static variables or private members with descriptive names maintainability is enhanced.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ignoreMagicNumbers",
        "description": "Comma-Separated list of magic numbers, that should be ignored"
      },
      {
        "name": "version",
        "description": ""
      }
    ]
  },
  {
    "patternId": "rulesets_java_controversial.xml_UseObjectForClearerAPI",
    "title": "Enforces the declaration of Objects for cleaner API",
    "description": "When you write a public method, you should be thinking in terms of an API. If your method is public, it means other class will use it, therefore, you want (or need) to offer a comprehensive and evolutive API. If you pass a lot of information as a simple series of Strings, you may think of using an Object to represent all those information. You’ll get a simplier API (such as doWork(Workload workload), rather than a tedious series of Strings) and more importantly, if you need at some point to pass extra data, you’ll be able to do so by simply modifying or extending Workload without any modification to your API.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_controversial.xml_UseConcurrentHashMap",
    "title": "Enforces the use of Concurrent HashMap",
    "description": "Since Java5 brought a new implementation of the Map designed for multi-threaded access, you can perform efficient map reads without blocking other threads.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_controversial.xml_DefaultPackage",
    "title": "Enforces the use of explicit scoping",
    "description": "Use explicit scoping instead of the default package private level.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_controversial.xml_AvoidUsingNativeCode",
    "title": "Prohibits the use of JNI(Java Native Interface)",
    "description": "Unnecessary reliance on Java Native Interface (JNI) calls directly reduces application portability and increases the maintenance burden.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_controversial.xml_AvoidAccessibilityAlteration",
    "title": "Prohibits the alteration of a variable accessibility",
    "description": "Methods such as getDeclaredConstructors(), getDeclaredConstructor(Class[]) and setAccessible(), as the interface PrivilegedAction, allows for the runtime alteration of variable, class, or method visibility, even if they are private. This violates the principle of encapsulation.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_typeresolution.xml_LooseCoupling",
    "title": "Enforces use of the interface instead of implementation types",
    "description": "Avoid using implementation types (i.e., HashSet); use the interface (i.e, Set) instead",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_typeresolution.xml_CloneMethodMustImplementCloneable",
    "title": "Enforces the implementation of Cloneable interface when using clone()",
    "description": "The method clone() should only be implemented if the class implements the Cloneable interface with the exception of a final method that only throws CloneNotSupportedException. This version uses PMD’s type resolution facilities, and can detect if the class implements or extends a Cloneable class.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_typeresolution.xml_UnusedImports",
    "title": "Prohibits unused import statements",
    "description": "Avoid unused import statements. This rule will find unused on demand imports, i.e. import com.foo.*.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_typeresolution.xml_SignatureDeclareThrowsException",
    "title": "Enforces the use of either a class derived from RunTimeException or a checked exception",
    "description": "It is unclear which exceptions that can be thrown from the methods. It might be difficult to document and understand the vague interfaces. Use either a class derived from RuntimeException or a checked exception.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "IgnoreJUnitCompletely",
        "description": "If true, all methods in a JUnit testcase may throw Exception"
      },
      {
        "name": "IgnoreJUnitCompletely",
        "description": "Allow all methods in a JUnit testcase to throw Exceptions"
      }
    ]
  },
  {
    "patternId": "rulesets_java_empty.xml_EmptyCatchBlock",
    "title": "Prohibits Empty Catch Blocks",
    "description": "Empty Catch Block finds instances where an exception is caught, but nothing is done. In most circumstances, this swallows an exception which should either be acted on or reported.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowCommentedBlocks",
        "description": "Empty blocks containing comments will be skipped"
      }
    ]
  },
  {
    "patternId": "rulesets_java_empty.xml_EmptyIfStmt",
    "title": "Prohibits empty If Statements",
    "description": "Empty If Statement finds instances where a condition is checked but nothing is done about it.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_empty.xml_EmptyWhileStmt",
    "title": "Prohibits the use of an empty While statement",
    "description": "Empty While Statement finds all instances where a while statement does nothing. If it is a timing loop, then you should use Thread.sleep() for it; if it is a while loop that does a lot in the exit expression, rewrite it to make it clearer.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_design.xml_AssignmentToNonFinalStatic",
    "title": "Prohibits unsafe static field",
    "description": "Prohibits the usage of a possible unsafe static field.",
    "timeToFix": 50,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_MissingStaticMethodInNonInstantiatableClass",
    "title": "Prohibits useless class",
    "description": "Prohibits a class that has private constructors and does not have any static methods or fields.",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_design.xml_AvoidSynchronizedAtMethodLevel",
    "title": "Prohibits method-level synchronization",
    "description": "Prohibits the usage of method-level synchronized modifier.",
    "timeToFix": 40
  },
  {
    "patternId": "rulesets_java_design.xml_MissingBreakInSwitch",
    "title": "Prohibits switch statements without break",
    "description": "Prohibits switch statements without break or return statements for each case option.",
    "timeToFix": 40
  },
  {
    "patternId": "rulesets_java_design.xml_UseNotifyAllInsteadOfNotify",
    "title": "Prohibits thread.notify()",
    "description": "Prohibits the usage of Thread.notify(), use Thread.notifyAll() instead.",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_design.xml_AvoidInstanceofChecksInCatchClause",
    "title": "Prohibits instanceof in catch block",
    "description": "Prohibits the usage of instanceof in a catch block.",
    "timeToFix": 30
  },
  {
    "patternId": "rulesets_java_design.xml_AbstractClassWithoutAbstractMethod",
    "title": "Prohibits abstract class without abstract methods",
    "description": "Prohibits abstract classes that does not contain any abstract methods.",
    "timeToFix": 120
  },
  {
    "patternId": "rulesets_java_design.xml_SimplifyConditional",
    "title": "Prohibits check for null before instanceof",
    "description": "Prohibits check for null before an instanceof",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_design.xml_CompareObjectsWithEquals",
    "title": "Enforce equals() to compare objects",
    "description": "Enforce the usage of equals() to compare objects instead of ==",
    "timeToFix": 20,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_PositionLiteralsFirstInComparisons",
    "title": "Enforces literals first in comparisons",
    "description": "Enforces literals to be positioned first in comparisons",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_design.xml_PositionLiteralsFirstInCaseInsensitiveComparisons",
    "title": "Enforces literals first in comparisons",
    "description": "Enforces literals to be positioned first in case insensitive comparisons",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_design.xml_UnnecessaryLocalBeforeReturn",
    "title": "Prohibits unnecessary local variables",
    "description": "Prohibits the creation of unnecessary local variables",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_NonThreadSafeSingleton",
    "title": "Prohibits non-thread safe singletons",
    "description": "Prohibits usage of non-thread safe singletons. It can result in bad state changes.",
    "timeToFix": 20,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "checkNonStaticFields",
        "description": "Check for non-static fields. Do not set this to true and checkNonStaticMethods to false"
      },
      {
        "name": "checkNonStaticMethods",
        "description": "Check for non-static methods. Do not set this to false and checkNonStaticFields to true."
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_UncommentedEmptyMethodBody",
    "title": "Prohibits uncommented empty methods",
    "description": "Prohibits the declaration of uncommented empty method body.",
    "timeToFix": 20
  },
  {
    "patternId": "rulesets_java_design.xml_UncommentedEmptyConstructor",
    "title": "Prohibits uncommented empty constructors",
    "description": "Prohibits the declaration of uncommented empty constructor body.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "ignoreExplicitConstructorInvocation",
        "description": "Ignore explicit constructor invocation when deciding whether constructor is empty or not"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_AvoidConstantsInterface",
    "title": "Prohibits interface as constants container",
    "description": "Prohibits the declaration of an interface as a container of constants",
    "timeToFix": 30
  },
  {
    "patternId": "rulesets_java_design.xml_UnsynchronizedStaticDateFormatter",
    "title": "Enforces SimpleDateFormat to be synchronized",
    "description": "Enforces SimpleDateFormat instances to be synchronized",
    "timeToFix": 30,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_PreserveStackTrace",
    "title": "Enforces statckTrace preservation",
    "description": "Enfroces stackTrace preservation when throwing exceptions on catch blocks.",
    "timeToFix": 30,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_UseCollectionIsEmpty",
    "title": "Enforces isEmpty() to determine if collection has elements.",
    "description": "Enforces isEmpty() method to determine if a collection has any elements.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_ClassWithOnlyPrivateConstructorsShouldBeFinal",
    "title": "Enforces final on class with only private constructors",
    "description": "Enforces a class with only private constructors to be final, unless the private constructor is invoked by a inner class.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_design.xml_EmptyMethodInAbstractClassShouldBeAbstract",
    "title": "Prohibits empty non-abstract methods in abstract class",
    "description": "Prohibits the definition of empty non-abstract methods in an abstract class.",
    "timeToFix": 180
  },
  {
    "patternId": "rulesets_java_design.xml_SingularField",
    "title": "Prohibits fields when local variable is enough",
    "description": "Prohibits the use of fields whose scopes are limited to just single methods, declare them as local variables instead.",
    "timeToFix": 30,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "disallowNotAssignment",
        "description": "Disallow violations where the first usage is not an assignment"
      },
      {
        "name": "checkInnerClasses",
        "description": "Check inner classes"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_ReturnEmptyArrayRatherThanNull",
    "title": "Prohibits returning null array",
    "description": "Prohibits returning null for any method that returns an array.",
    "timeToFix": 50
  },
  {
    "patternId": "rulesets_java_design.xml_AbstractClassWithoutAnyMethod",
    "title": "Prohibits abstract class without methods",
    "description": "Prohibits an abstract class which does not provides any methods.",
    "timeToFix": 60
  },
  {
    "patternId": "rulesets_java_design.xml_TooFewBranchesForASwitchStatement",
    "title": "Prohibits small switch statements",
    "description": "Prohibits switch statements for only a few cases. Use if-then instead.",
    "timeToFix": 30,
    "parameters": [
      {
        "name": "minimumNumberCaseForASwitch",
        "description": "Minimum number of branches for a switch"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_LogicInversion",
    "title": "Enforces opposite operator instead of negating",
    "description": "Enforces the usage of the opposite operator instead of negating the whole expression with a logic complement operator.",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_design.xml_UseVarargs",
    "title": "Enforces varargs for arbitrary number of parameters",
    "description": "Enforces the use of varargs instead of arrays when declaring a method with arbitrary number os parameters.",
    "timeToFix": 40
  },
  {
    "patternId": "rulesets_java_design.xml_FieldDeclarationsShouldBeAtStartOfClass",
    "title": "Enforces field declarations at top of the class",
    "description": "Enforces field declarations at the top of the class, before any method declarations, constructors, initializers or inner classes.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "ignoreAnonymousClassDeclarations",
        "description": "Ignore Field Declarations, that are initialized with anonymous class declarations"
      },
      {
        "name": "ignoreEnumDeclarations",
        "description": "Ignore Enum Declarations that precede fields."
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_GodClass",
    "title": "Prohibits the usage of a God Class",
    "description": "Prohibits the usage of a class that have and does too many things",
    "timeToFix": 480,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_design.xml_AvoidProtectedMethodInFinalClassNotExtending",
    "title": "Prohibits protected methods in final classes",
    "description": "Prohibits the definition of protected methods in final classes.",
    "timeToFix": 40
  },
  {
    "patternId": "rulesets_java_empty.xml_EmptyTryBlock",
    "title": "Prohibits empty try blocks",
    "description": "Avoid empty try blocks - what’s the point?",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_empty.xml_EmptyFinallyBlock",
    "title": "Prohibits empty finally blocks",
    "description": "Empty finally blocks serve no purpose and should be removed.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_empty.xml_EmptySwitchStatements",
    "title": "Prohibits the use of empty switch statements",
    "description": "Empty switch statements serve no purpose and should be removed.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_empty.xml_EmptySynchronizedBlock",
    "title": "Prohibits the use of empty synchronized blocks",
    "description": "Empty synchronized blocks serve no purpose and should be removed.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_empty.xml_EmptyStatementNotInLoop",
    "title": "Prohibits empty statements that are not inside a loop",
    "description": "An empty statement (or a semicolon by itself) that is not used as the sole body of a ‘for’ or ‘while’ loop is probably a bug. It could also be a double semicolon, which has no purpose and should be removed.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_empty.xml_EmptyInitializer",
    "title": "Prohibits the use of empty initializers",
    "description": "Empty initializers serve no purpose and should be removed.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_empty.xml_EmptyStatementBlock",
    "title": "Prohibits the implementation of empty block statements",
    "description": "Empty block statements serve no purpose and should be removed.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_empty.xml_EmptyStaticInitializer",
    "title": "Prohibits the use of an empty static initializer",
    "description": "An empty static initializer serve no purpose and should be removed.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_unnecessary.xml_UnnecessaryConversionTemporary",
    "title": "Prohibits the use of temporary objects for conversions to String",
    "description": "Avoid the use temporary objects when converting primitives to Strings. Use the static conversion methods on the wrapper classes instead.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_unnecessary.xml_UnnecessaryReturn",
    "title": "Prohibits the use of unnecessary return statements",
    "description": "Avoid the use of unnecessary return statements.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_unnecessary.xml_UnnecessaryFinalModifier",
    "title": "Prohibits the use of final tag when class has the final modifier",
    "description": "When a class has the final modifier, all the methods are automatically final and do not need to be tagged as such.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_unnecessary.xml_UselessOverridingMethod",
    "title": "Prohibits the use of the overriding method",
    "description": "The overriding method merely calls the same method defined in a superclass.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "ignoreAnnotations",
        "description": "Ignore annotations"
      }
    ]
  },
  {
    "patternId": "rulesets_java_unnecessary.xml_UselessOperationOnImmutable",
    "title": "Prohibits an operation on an Immutable object that tries to change the object itself",
    "description": "An operation on an Immutable object (String, BigDecimal or BigInteger) won’t change the object itself since the result of the operation is a new object. Therefore, ignoring the operation result is an error.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_unnecessary.xml_UnusedNullCheckInEquals",
    "title": "Enforces the correct usage of null checking in object references",
    "description": "After checking an object reference for null, you should invoke equals() on that object rather than passing it to another object’s equals() method.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_unnecessary.xml_UselessParentheses",
    "title": "Prohibits the use of useless parentheses",
    "description": "Useless parentheses should be removed.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_clone.xml_ProperCloneImplementation",
    "title": "Enforces the call to super when implementing clone()",
    "description": "Object clone() should be implemented with super.clone().",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_clone.xml_CloneThrowsCloneNotSupportedException",
    "title": "Enforces throwing a CloneNotSupportedException when using clone()",
    "description": "The method clone() should throw a CloneNotSupportedException.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_clone.xml_CloneMethodMustImplementCloneable",
    "title": "Enforces the class to implement Cloneable interface when using clone()",
    "description": "The method clone() should only be implemented if the class implements the Cloneable interface with the exception of a final method that only throws CloneNotSupportedException.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_finalizers.xml_EmptyFinalizer",
    "title": "Prohibits the implementation of an empty Finalizer",
    "description": "Empty finalize methods serve no purpose and should be removed.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_finalizers.xml_FinalizeOnlyCallsSuperFinalize",
    "title": "Prohibits only calling super.finalize() inside finalize()",
    "description": "If the finalize() is implemented, it should do something besides just calling super.finalize().",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_finalizers.xml_FinalizeOverloaded",
    "title": "Enforces finalize to not have any parameters",
    "description": "Methods named finalize() should not have parameters. It is confusing and most likely an attempt to overload Object.finalize(). It will not be called by the VM.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_finalizers.xml_FinalizeDoesNotCallSuperFinalize",
    "title": "Enforces the call of super.finalize as the last action in finalize",
    "description": "If the finalize() is implemented, its last action should be to call super.finalize.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_finalizers.xml_FinalizeShouldBeProtected",
    "title": "Enforces the finalize method to be protected",
    "description": "When overriding the finalize(), the new method should be set as protected. If made public, other classes may invoke it at inappropriate times.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_finalizers.xml_AvoidCallingFinalize",
    "title": "Prohibits the calling of Object.finalize() method",
    "description": "The method Object.finalize() is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. It should not be invoked by application logic.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_codesize.xml_NPathComplexity",
    "title": "Enforces that the code should be separeted by modular methods",
    "description": "The NPath complexity of a method is the number of acyclic execution paths through that method. A threshold of 200 is generally considered the point where measures should be taken to reduce complexity and increase readability.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "minimum",
        "description": "Minimum reporting threshold"
      }
    ]
  },
  {
    "patternId": "rulesets_java_codesize.xml_ExcessiveMethodLength",
    "title": "Enforces small and clear methods",
    "description": "When methods are excessively long this usually indicates that the method is doing more than its name/signature might suggest. They also become challenging for others to digest since excessive scrolling causes readers to lose focus. Try to reduce the method length by creating helper methods and removing any copy/pasted code.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "minimum",
        "description": "Minimum reporting threshold"
      }
    ]
  },
  {
    "patternId": "rulesets_java_codesize.xml_ExcessiveParameterList",
    "title": "Enforces the moderate usage of parameters in methods",
    "description": "Methods with numerous parameters are a challenge to maintain, especially if most of them share the same datatype. These situations usually denote the need for new objects to wrap the numerous parameters.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "minimum",
        "description": "Minimum reporting threshold"
      }
    ]
  },
  {
    "patternId": "rulesets_java_codesize.xml_ExcessiveClassLength",
    "title": "Enforces the care you should take when looking at class file lengths",
    "description": "Excessive class file lengths are usually indications that the class may be burdened with excessive responsibilities that could be provided by external classes or functions. In breaking these methods apart the code becomes more managable and ripe for reuse.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "minimum",
        "description": "Minimum reporting threshold"
      }
    ]
  },
  {
    "patternId": "rulesets_java_codesize.xml_CyclomaticComplexity",
    "title": "Enforces the moderate use of if's, while's, for's and case labels",
    "description": "Complexity directly affects maintenance costs is determined by the number of decision points in a method plus one for the method entry. The decision points include ‘if’, ‘while’, ‘for’, and ‘case labels’ calls. Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote high complexity, and 11+ is very high complexity.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "showMethodsComplexity",
        "description": "Add method average violations to the report"
      },
      {
        "name": "showClassesComplexity",
        "description": "Add class average violations to the report"
      },
      {
        "name": "reportLevel",
        "description": "Cyclomatic Complexity reporting threshold"
      }
    ]
  },
  {
    "patternId": "rulesets_java_codesize.xml_ExcessivePublicCount",
    "title": "Enforces the division of a many public methods class into seperate ones",
    "description": "Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. Refactoring these classes into smaller ones not only increases testability and reliability but also allows new variations to be developed easily.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "minimum",
        "description": "Minimum reporting threshold"
      }
    ]
  },
  {
    "patternId": "rulesets_java_codesize.xml_TooManyFields",
    "title": "Enforces better code refactoring when there are too many fields",
    "description": "Classes that have too many fields can become unwieldy and could be redesigned to have fewer fields, possibly through grouping related fields in new objects. For example, a class with individual city/state/zip fields could park them within a single Address field.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "maxfields",
        "description": "Max allowable fields"
      }
    ]
  },
  {
    "patternId": "rulesets_java_codesize.xml_NcssMethodCount",
    "title": "Enforces each method to not have too many lines of code",
    "description": "This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines of code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "minimum",
        "description": "Minimum reporting threshold"
      }
    ]
  },
  {
    "patternId": "rulesets_java_codesize.xml_NcssTypeCount",
    "title": "Enforces each type to not have many lines of code ",
    "description": "This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines of code for a given type. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "minimum",
        "description": "Minimum reporting threshold"
      }
    ]
  },
  {
    "patternId": "rulesets_java_codesize.xml_NcssConstructorCount",
    "title": "Enforces the usage of less code inside a constructor",
    "description": "This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines of code for a given constructor. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "minimum",
        "description": "Minimum reporting threshold"
      }
    ]
  },
  {
    "patternId": "rulesets_java_codesize.xml_TooManyMethods",
    "title": "Enforces refactoring of Class if there are too many methods",
    "description": "A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      },
      {
        "name": "maxmethods",
        "description": "The method reporting threshold"
      }
    ]
  },
  {
    "patternId": "rulesets_java_basic.xml_UnconditionalIfStatement",
    "title": "Prohibits useless if statements",
    "description": "Prohibits the usage of if statements whose conditionals are always true or always false.",
    "timeToFix": 20
  },
  {
    "patternId": "rulesets_java_basic.xml_BooleanInstantiation",
    "title": "Prohibits instantiation of Boolean",
    "description": "Prohibits instantiation of Boolean objects, you can reference Boolean.TRUE, Boolean.FALSE",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_basic.xml_CollapsibleIfStatements",
    "title": "Prohibits multiple if statements that can combine",
    "description": "Prohibits the usage of two consecutive if statements that can be consolidated by separating their conditions with a boolean short-circuit operator.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets_java_basic.xml_ClassCastExceptionWithToArray",
    "title": "Prohibits cast to Array without parameter",
    "description": "Prohibits casting an array without providing an array of the same class as the parameter of the toArray() method.",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_basic.xml_MisplacedNullCheck",
    "title": "Prohibits misplaced null check",
    "description": "Prohibits a null check that is done only after the usage of the reference",
    "timeToFix": 10
  },
  {
    "patternId": "rulesets_java_basic.xml_AvoidThreadGroup",
    "title": "Prohibits the usage of ThreadGroup",
    "description": "Prohibits the usage of java.lang.ThreadGroup.",
    "timeToFix": 40
  },
  {
    "patternId": "rulesets_java_basic.xml_BigIntegerInstantiation",
    "title": "Prohibits creation of already existing BigInteger",
    "description": "Prohibits the creation of already existing BigInteger (BigInteger.ZERO, BigInteger.ONE ..)",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_basic.xml_AvoidUsingHardCodedIP",
    "title": "Prohibits hard-coded IP",
    "description": "Prohibits the usage ofhard-coded IP addresses",
    "timeToFix": 60,
    "parameters": [
      {
        "name": "violationSuppressRegex",
        "description": "Suppress violations with messages matching a regular expression"
      },
      {
        "name": "violationSuppressXPath",
        "description": "Suppress violations on nodes which match a given relative XPath expression"
      }
    ]
  },
  {
    "patternId": "rulesets_java_basic.xml_ExtendsObject",
    "title": "Prohibits explicitly extending Object",
    "description": "Prohibits the explicit extends of Object.",
    "timeToFix": 5
  }
]
